import asyncio
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
from apscheduler.executors.pool import ThreadPoolExecutor
from apscheduler.triggers.date import DateTrigger
import sys
from django.conf import settings
from .create_bot import bot, dp 
from core.models import *
from asgiref.sync import sync_to_async
from bot.handlers.after_1_month import Form_1
from bot.handlers.after_3_month import Form_3
from bot.handlers.after_6_month import Form_6
from bot.handlers.after_12_month import Form_12
from bot.handlers.after_18_month import Form_18
from bot.handlers.after_24_month import Form_24
from bot.handlers.after_30_month import Form_30
from bot.handlers.after_36_month import Form_36
from bot.handlers.after_14_days import Form_14
from bot.keyboards import ready_kb
import logging
from channels.db import database_sync_to_async

_scheduler_instance = None

def get_scheduler():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    global _scheduler_instance
    logger.info(f"üìã get_scheduler() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {_scheduler_instance}")
    if _scheduler_instance:
        logger.info(f"‚ö° –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ running: {_scheduler_instance.running}")
    return _scheduler_instance

async def has_completed_poll(employee_id, poll_name):
    try:
        poll = await sync_to_async(Poll.objects.get, thread_sensitive=True)(name=poll_name)
        queryset = Answer.objects.filter(login_id=employee_id, question__poll=poll)
        exists = await sync_to_async(queryset.exists, thread_sensitive=True)()
        return exists
    except Poll.DoesNotExist:
        return False


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def is_user_available(telegram_id):
    try:
        current_state = await dp.fsm.get_context(
            bot=bot,
            chat_id=telegram_id,
            user_id=telegram_id
        ).get_state()
        return current_state is None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return True

async def send_poll_after_14_days(employee_id):
    if (not await has_completed_poll(employee_id, "–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 14 –¥–Ω–µ–π")): #–µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–ø—Ä–æ—Å
        try:
            employee = await sync_to_async(Employee.objects.get, thread_sensitive=True)(id=employee_id)
            if not await is_user_available(employee.telegram_id):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {employee.telegram_id} –∑–∞–Ω—è—Ç, –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 14 –¥–Ω–µ–π –æ—Ç–ª–æ–∂–µ–Ω")
                return
            state = dp.fsm.get_context(
                bot=bot,
                chat_id=employee.telegram_id,
                user_id=employee.telegram_id
            )
            await state.set_state(Form_14.question_1)
            
            await bot.send_message(
                chat_id=employee.telegram_id,
                text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –º–æ–ª–æ–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç! üëã\n\n'
                           '–≠—Ç–æ —è ‚Äì –ì–∞–∑–æ–ø—Ç–∏–∫—É–º, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫! \n'
                           '–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø–µ—Ä–≤—ã–µ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏?\n'
                           '–û—Ç–º–µ—Ç—å –≤ –æ–ø—Ä–æ—Å–µ –Ω–∏–∂–µ ‚¨á')
            
            await bot.send_poll(
                chat_id=employee.telegram_id,
                question="–ö–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?",
                options=["–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ! üëç", "–í—Å–µ —Ö–æ—Ä–æ—à–æ! üòä", "–°—Ä–µ–¥–Ω–µ", "–•–æ—Ç–µ–ª–æ—Å—å –±—ã, —á—Ç–æ–± –±—ã–ª–æ –ª—É—á—à–µ ‚Ä¶üôÅ", "–í—Å–µ –ø–ª–æ—Ö–æ! üò¢"],
                is_anonymous=False,
                allows_multiple_answers=False,
                type="regular"
            )              
            await state.update_data(poll_options=["–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ! üëç", "–í—Å–µ —Ö–æ—Ä–æ—à–æ! üòä", "–°—Ä–µ–¥–Ω–µ", "–•–æ—Ç–µ–ª–æ—Å—å –±—ã, —á—Ç–æ–± –±—ã–ª–æ –ª—É—á—à–µ ‚Ä¶üôÅ", "–í—Å–µ –ø–ª–æ—Ö–æ! üò¢"])
            await bot.send_message(
                chat_id=employee.telegram_id,
                text="–ö–∞–∫ –æ–±—Å—Ç–æ—è—Ç –¥–µ–ª–∞ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π —Ç–≤–æ–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏? –í–æ–∑–º–æ–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏–¥–µ—Ç –Ω–µ —Ç–∞–∫, –∫–∞–∫ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã? –û–ø–∏—à–∏ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö ‚¨á"
            )
            await state.set_state(Form_14.question_3)
            logger.info(f"–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 14 –¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}")

        except Exception as e:
            from bot.config import add_to_blocked
            add_to_blocked(employee.telegram_id)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 14 –¥–Ω–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}: {e}")

async def send_poll_after_1_month(employee_id):
    if (not await has_completed_poll(employee_id, "–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü")): #–µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–ø—Ä–æ—Å
        try:
            employee = await sync_to_async(Employee.objects.get, thread_sensitive=True)(id=employee_id)
            if not await is_user_available(employee.telegram_id):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {employee.telegram_id} –∑–∞–Ω—è—Ç, –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 1 –º–µ—Å—è—Ü –æ—Ç–ª–æ–∂–µ–Ω")
                return
            state = dp.fsm.get_context(
                bot=bot,
                chat_id=employee.telegram_id,
                user_id=employee.telegram_id
            )
            await state.set_state(Form_1.how_are_you)
            
            await bot.send_message(
                chat_id=employee.telegram_id,
                text='–ü—Ä–∏–≤–µ—Ç!\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å —É—Å–ø–µ—à–Ω—ã–º —Å—Ç–∞—Ä—Ç–æ–º –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ ‚Äî –ø—Ä–æ—à—ë–ª —É–∂–µ —Ü–µ–ª—ã–π –º–µ—Å—è—Ü! üòä\n\n'
                    '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –≤–º–µ—Å—Ç–µ —É–≤–∏–¥–µ—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ –∏–¥—ë—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å –ø–æ —á–µ–∫-–ª–∏—Å—Ç—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.\n\n'
                    '–ì–æ—Ç–æ–≤(–∞)? –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤(–∞)¬ª',
                reply_markup=await ready_kb(employee.telegram_id)
            )
            
            logger.info(f"–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 1 –º–µ—Å—è—Ü –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}")

        except Exception as e:
            from bot.config import add_to_blocked
            add_to_blocked(employee.telegram_id)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 1 –º–µ—Å—è—Ü —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}: {e}")

async def send_poll_after_3_month(employee_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞ –ø–æ—Å–ª–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    if (not await has_completed_poll(employee_id, "–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞")): #–µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–ø—Ä–æ—Å
        try:
            employee = await sync_to_async(Employee.objects.get, thread_sensitive=True)(id=employee_id)
            if not await is_user_available(employee.telegram_id):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {employee.telegram_id} –∑–∞–Ω—è—Ç, –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞ –æ—Ç–ª–æ–∂–µ–Ω")
                return

            state = dp.fsm.get_context(
                bot=bot,
                chat_id=employee.telegram_id,
                user_id=employee.telegram_id
            )
            await state.set_state(Form_3.how_are_you)
            
            await bot.send_message(
                chat_id=employee.telegram_id,
                text='–ü—Ä–∏–≤–µ—Ç!\n\n'
                    '–¢—Ä–∏ –º–µ—Å—è—Ü–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n'
                    '–ü–µ—Ä–≤–∞—è —Å—Ç—É–ø–µ–Ω—å —Ç–≤–æ–µ–≥–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É, –∏ –º–Ω–µ –≤–∞–∂–Ω–æ —É–∑–Ω–∞—Ç—å, '
                    '–∫–∞–∫ —É —Ç–µ–±—è –∏–¥—É—Ç –¥–µ–ª–∞. –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                    '–æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n'
                    '–ì–æ—Ç–æ–≤(–∞)? –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤(–∞)¬ª',
                reply_markup=await ready_kb(employee.telegram_id)
            )
            logger.info(f"–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}")
        except Exception as e:
            from bot.config import add_to_blocked
            add_to_blocked(employee.telegram_id)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}: {e}")

async def send_poll_after_6_month(employee_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤ –ø–æ—Å–ª–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    if (not await has_completed_poll(employee_id, "–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤")): #–µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–ø—Ä–æ—Å
        try:
            employee = await sync_to_async(Employee.objects.get, thread_sensitive=True)(id=employee_id)
            if not await is_user_available(employee.telegram_id):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {employee.telegram_id} –∑–∞–Ω—è—Ç, –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤ –æ—Ç–ª–æ–∂–µ–Ω")
                return

            state = dp.fsm.get_context(
                bot=bot,
                chat_id=employee.telegram_id,
                user_id=employee.telegram_id
            )
            await state.set_state(Form_6.how_are_you)
            
            await bot.send_message(
                chat_id=employee.telegram_id,
                text='–ü—Ä–∏–≤–µ—Ç!\n\n'
                    '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —É—Å–ø–µ—à–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä—É–¥–æ–≤–æ–≥–æ –≥–æ–¥–∞ –≤ –Ω–∞—à–µ–º –¥—Ä—É–∂–Ω–æ–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ! ‚ú®'
                    '–ü—Ä–æ—à–µ–¥—à–∏–π –≥–æ–¥ –ø–æ–∫–∞–∑–∞–ª, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º–∞ —Ç–≤–æ—è —Ä–æ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ. –¢—ã –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏, –ø—Ä–æ—è–≤–∏–ª –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–∞ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏.\n\n'
                    '–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –æ—â—É—â–µ–Ω–∏—è–º–∏ –∏ —ç–º–æ—Ü–∏—è–º–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –≥–æ–¥–∞? –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–º–∏ –æ—Å–æ–±–µ–Ω–Ω–æ –≥–æ—Ä–¥–∏—à—å—Å—è –∏ –ø–æ–º–Ω–∏—à—å. –ò –∫–æ–Ω–µ—á–Ω–æ –∂–µ, –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤–æ–∏ –∏–¥–µ–∏, –∫–∞–∫ –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ –∏ –ø—Ä–∏—è—Ç–Ω–µ–µ! üôÇ\n\n'
                    '–ì–æ—Ç–æ–≤(–∞)? –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤(–∞)¬ª',
                reply_markup=await ready_kb(employee.telegram_id)
            )
            logger.info(f"–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}")
        except Exception as e:
            from bot.config import add_to_blocked
            add_to_blocked(employee.telegram_id)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}: {e}")
            
async def send_poll_after_12_month(employee_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 12 –º–µ—Å—è—Ü–µ–≤ –ø–æ—Å–ª–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    if (not await has_completed_poll(employee_id, "–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 12 –º–µ—Å—è—Ü–µ–≤")): #–µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–ø—Ä–æ—Å
        try:
            employee = await sync_to_async(Employee.objects.get, thread_sensitive=True)(id=employee_id)
            if not await is_user_available(employee.telegram_id):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {employee.telegram_id} –∑–∞–Ω—è—Ç, –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 12 –º–µ—Å—è—Ü–µ–≤ –æ—Ç–ª–æ–∂–µ–Ω")
                return

            state = dp.fsm.get_context(
                bot=bot,
                chat_id=employee.telegram_id,
                user_id=employee.telegram_id
            )
            await state.set_state(Form_12.how_are_you)
            
            await bot.send_message(
                chat_id=employee.telegram_id,
                text='–ü—Ä–∏–≤–µ—Ç!\n\n'
                           '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–µ—Ä–≤—ã–º —Ç—Ä—É–¥–æ–≤—ã–º –≥–æ–¥–æ–º –≤ –Ω–∞—à–µ–π –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ! '
                           '–ó–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –≥–æ–¥ —Ç—ã —Å—Ç–∞–ª –≤–∞–∂–Ω–æ–π —á–∞—Å—Ç—å—é –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞, –≤–Ω–µ—Å –æ–≥—Ä–æ–º–Ω—ã–π –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –¥–æ–∫–∞–∑–∞–ª —Å–≤–æ—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º.\n'
                           '–¢—ã –ø—Ä–æ–¥–µ–ª–∞–ª –±–æ–ª—å—à—É—é —Ä–∞–±–æ—Ç—É –∏ –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ —É—Å–ø–µ–ª –Ω–∞–∫–æ–ø–∏—Ç—å –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π –∏ –æ–ø—ã—Ç–∞. \n'
                           '–ü–æ–¥–µ–ª–∏—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –ø–µ—Ä–≤–æ–º —Ä–∞–±–æ—á–µ–º –≥–æ–¥—É, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –∏ —É—Å–ø–µ—Ö–∞—Ö, –∫–æ—Ç–æ—Ä—ã–º–∏ –≥–æ—Ä–¥–∏—à—å—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ. –ê —Ç–∞–∫–∂–µ –ø–æ–¥–µ–ª–∏—Å—å –∏–¥–µ—è–º–∏, –∫–∞–∫ –º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à—É —Å–æ–≤–º–µ—Å—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É –µ—â—ë —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ.\n'
                           '–ì–æ—Ç–æ–≤(–∞)? –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤(–∞)¬ª', reply_markup = await ready_kb(employee.telegram_id))
            
            logger.info(f"–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 12 –º–µ—Å—è—Ü–µ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}")
        except Exception as e:
            from bot.config import add_to_blocked
            add_to_blocked(employee.telegram_id)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 12 –º–µ—Å—è—Ü–µ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}: {e}")            

async def send_poll_after_18_month(employee_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 18 –º–µ—Å—è—Ü–µ–≤ –ø–æ—Å–ª–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    if (not await has_completed_poll(employee_id, "–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 18 –º–µ—Å—è—Ü–µ–≤")): #–µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–ø—Ä–æ—Å
        try:
            employee = await sync_to_async(Employee.objects.get, thread_sensitive=True)(id=employee_id)
            if not await is_user_available(employee.telegram_id):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {employee.telegram_id} –∑–∞–Ω—è—Ç, –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 18 –º–µ—Å—è—Ü–µ–≤ –æ—Ç–ª–æ–∂–µ–Ω")
                return

            state = dp.fsm.get_context(
                bot=bot,
                chat_id=employee.telegram_id,
                user_id=employee.telegram_id
            )
            await state.set_state(Form_18.how_are_you)
            
            await bot.send_message(
                chat_id=employee.telegram_id,
                text='–ü—Ä–∏–≤–µ—Ç!\n\n'
                           '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º –ø–æ–ª–æ–≤–∏–Ω—ã –ø—É—Ç–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–æ–ª–æ–¥–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã! üöÄ \n\n'
                           '–ü–æ–∑–∞–¥–∏ —É–∂–µ –Ω–µ–º–∞–ª–æ —Ü–µ–Ω–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏, –≤–ø–µ—Ä–µ–¥–∏ –∂–¥—É—Ç –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã! \n'
                           '–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∏–¥–µ–∏, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É –µ—â–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–π –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–π.\n'
                           '–ì–æ—Ç–æ–≤(–∞)? –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤(–∞)¬ª', reply_markup = await ready_kb(employee.telegram_id))
            
            logger.info(f"–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 18 –º–µ—Å—è—Ü–µ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}")
        except Exception as e:
            from bot.config import add_to_blocked
            add_to_blocked(employee.telegram_id)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 18 –º–µ—Å—è—Ü–µ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}: {e}")            

async def send_poll_after_24_month(employee_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 24 –º–µ—Å—è—Ü–∞ –ø–æ—Å–ª–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    if (not await has_completed_poll(employee_id, "–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 24 –º–µ—Å—è—Ü–∞")): #–µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–ø—Ä–æ—Å
        try:
            employee = await sync_to_async(Employee.objects.get, thread_sensitive=True)(id=employee_id)
            if not await is_user_available(employee.telegram_id):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {employee.telegram_id} –∑–∞–Ω—è—Ç, –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 24 –º–µ—Å—è—Ü–∞ –æ—Ç–ª–æ–∂–µ–Ω")
                return

            state = dp.fsm.get_context(
                bot=bot,
                chat_id=employee.telegram_id,
                user_id=employee.telegram_id
            )
            await state.set_state(Form_24.how_are_you)
            
            await bot.send_message(
                chat_id=employee.telegram_id,
                text='–ü—Ä–∏–≤–µ—Ç!\n\n'
                           '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –¥–≤—É—Ö–ª–µ—Ç–∏–µ–º –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ! üéØ\n\n'
                           '–ü—Ä–æ—à–ª–æ —É–∂–µ —Ü–µ–ª—ã—Ö –¥–≤–∞ –≥–æ–¥–∞ ‚Äî —Ç—ã –ø—Ä–æ—à—ë–ª –æ–≥—Ä–æ–º–Ω—ã–π –ø—É—Ç—å, –¥–æ–∫–∞–∑–∞–ª —Å–≤–æ—é –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ —Å–¥–µ–ª–∞–ª –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏. –í–ø–µ—Ä–µ–¥–∏ –∂–¥—É—Ç –Ω–æ–≤—ã–µ —Ä—É–±–µ–∂–∏ –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è!\n'
                           '–ü–æ–¥–µ–ª–∏—Å—å –º—ã—Å–ª—è–º–∏ –æ –Ω—ã–Ω–µ—à–Ω–µ–π —Ä–∞–±–æ—Ç–µ, —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –≤–∏–¥–∏—à—å —Å–≤–æ—ë –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—â—ë –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º–∏.\n'
                           '–ì–æ—Ç–æ–≤(–∞) –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é –∏ –Ω–æ–≤–æ–º—É —ç—Ç–∞–ø—É —Ä–∞–∑–≤–∏—Ç–∏—è? –ñ–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤(–∞)¬ª!', reply_markup = await ready_kb(employee.telegram_id))
            
            logger.info(f"–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 24 –º–µ—Å—è—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}")
        except Exception as e:
            from bot.config import add_to_blocked
            add_to_blocked(employee.telegram_id)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 24 –º–µ—Å—è—Ü–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}: {e}")            

async def send_poll_after_30_month(employee_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 30 –º–µ—Å—è—Ü–µ–≤ –ø–æ—Å–ª–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    if (not await has_completed_poll(employee_id, "–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 30 –º–µ—Å—è—Ü–µ–≤")): #–µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–ø—Ä–æ—Å
        try:
            employee = await sync_to_async(Employee.objects.get, thread_sensitive=True)(id=employee_id)
            if not await is_user_available(employee.telegram_id):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {employee.telegram_id} –∑–∞–Ω—è—Ç, –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 30 –º–µ—Å—è—Ü–µ–≤ –æ—Ç–ª–æ–∂–µ–Ω")
                return

            state = dp.fsm.get_context(
                bot=bot,
                chat_id=employee.telegram_id,
                user_id=employee.telegram_id
            )
            await state.set_state(Form_30.how_are_you)
            
            await bot.send_message(
                chat_id=employee.telegram_id,
                text='–ü—Ä–∏–≤–µ—Ç!\n\n'
                           '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ–º –≤–∞–∂–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏ ‚Äî 2,5 –≥–æ–¥–∞ —Ä–∞–±–æ—Ç—ã –≤ –Ω–∞—à–µ–º –¥—Ä—É–∂–Ω–æ–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ! üåü\n\n'
                           '–£–∂–µ –º–Ω–æ–≥–æ–µ —É—Å–ø–µ–ª, –≤–ø–µ—Ä–µ–¥–∏ ‚Äî –µ—â—ë –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ. –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç–µ–±–µ —Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å –∏ –∫–∞–∫–∏–µ –∏–¥–µ–∏ –µ—Å—Ç—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π.\n\n'
                           '–ì–æ—Ç–æ–≤(–∞)?', reply_markup = await ready_kb(employee.telegram_id))
            
            logger.info(f"–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 30 –º–µ—Å—è—Ü–µ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}")
        except Exception as e:
            from bot.config import add_to_blocked
            add_to_blocked(employee.telegram_id)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 30 –º–µ—Å—è—Ü–µ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}: {e}")            

async def send_poll_after_36_month(employee_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 36 –º–µ—Å—è—Ü–µ–≤ –ø–æ—Å–ª–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    if (not await has_completed_poll(employee_id, "–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 36 –º–µ—Å—è—Ü–µ–≤")): #–µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–ø—Ä–æ—Å
        try:
            employee = await sync_to_async(Employee.objects.get, thread_sensitive=True)(id=employee_id)
            if not await is_user_available(employee.telegram_id):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {employee.telegram_id} –∑–∞–Ω—è—Ç, –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 36 –º–µ—Å—è—Ü–µ–≤ –æ—Ç–ª–æ–∂–µ–Ω")
                return

            state = dp.fsm.get_context(
                bot=bot,
                chat_id=employee.telegram_id,
                user_id=employee.telegram_id
            )
            await state.set_state(Form_36.how_are_you)
            
            await bot.send_message(
                chat_id=employee.telegram_id,
                text='–ü—Ä–∏–≤–µ—Ç!\n\n'
                         '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —É—Å–ø–µ—à–Ω—ã–º–∏ —Ç—Ä–µ–º—è –≥–æ–¥–∞–º–∏ —Ä–∞–±–æ—Ç—ã –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ! üéâ\n\n'
                           '–£–≤–µ—Ä–µ–Ω, —á—Ç–æ —É—Å–ø–µ—Ö–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –Ω–µ –º–∞–ª–æ!\n'
                           '–ù–æ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ –≤—Å–ø–æ–º–Ω–∏—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å –∏ –æ–±—Å—É–¥–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–ª–∞–Ω—ã.\n'
                           '–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Ç–æ–º, –∫–∞–∫ —Ç–µ–±–µ —Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å, –∫–∞–∫–∏–µ —É—Å–ø–µ—Ö–∏ –¥–æ—Å—Ç–∏–≥, –∏ –∫–∞–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É —Ç–µ–±—è –µ—Å—Ç—å –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –≤ —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ!\n'
                           '–ß—Ç–æ —Å–∫–∞–∂–µ—à—å? –ù–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤¬ª!', reply_markup = await ready_kb(employee.telegram_id))
            
            logger.info(f"–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 36 –º–µ—Å—è—Ü–µ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}")
        except Exception as e:
            from bot.config import add_to_blocked
            add_to_blocked(employee.telegram_id)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 36 –º–µ—Å—è—Ü–µ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}: {e}")            



def schedule_poll_hire(scheduler, employee, days_delta, send_func):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –æ–ø—Ä–æ—Å–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ—Å–ª–µ hire_date"""
    try:
        send_date = employee.hire_date + timedelta(days=days_delta)
        send_time = datetime.combine(
            send_date,
            datetime.strptime("10:00", "%H:%M").time()
        )
        logger.info(f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {employee.id}: {send_time}")

        
        if send_time > datetime.now():
            scheduler.add_job(
                send_func,
                trigger=DateTrigger(run_date=send_time),
                args=[employee.id],
                id=f"poll_{days_delta}days_{employee.id}",
                replace_existing=True
            )
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ {days_delta} –¥–Ω–µ–π –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id} –Ω–∞ {send_time}")
        else:
            scheduler.add_job(
                send_func,
                trigger=DateTrigger(run_date=datetime.now()),
                args=[employee.id],
                id=f"poll_immediate_{employee.id}",
                replace_existing=True
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id}: {e}")

def schedule_poll_tg(scheduler, employee, days_delta, send_func):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –æ–ø—Ä–æ—Å–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ"""
    try:
        send_date = employee.telegram_registration_date + timedelta(days=days_delta)
        send_time = datetime.combine(
            send_date,
            datetime.strptime("10:00", "%H:%M").time()
        )
        logger.info(f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {employee.id}: {send_time}")

        
        if send_time > datetime.now():
            scheduler.add_job(
                send_func,
                trigger=DateTrigger(run_date=send_time),
                args=[employee.id],
                id=f"poll_{days_delta}days_{employee.id}",
                replace_existing=True
            )
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ {days_delta} –¥–Ω–µ–π –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id} –Ω–∞ {send_time}")
        else:
            scheduler.add_job(
                send_func,
                trigger=DateTrigger(run_date=datetime.now()),
                args=[employee.id],
                id=f"poll_immediate_{employee.id}_{days_delta}_days",
                replace_existing=True
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id}: {e}")

def schedule_weekly_polls(scheduler, employee, start_date, times, num, send_func):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–ø—Ä–æ—Å—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ –Ω–µ–¥–µ–ª—é –Ω–∞—á–∏–Ω–∞—è —Å start_date"""
    try:
        for week_number in range(1, times + 1):  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å
            send_date = start_date + timedelta(weeks=(week_number - 1)*num)
            #–ø–æ–ª—É—á–∞–µ–º, –≤ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Ä–∞—Å—á–∏—Ç–∞–Ω–∞ –¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            day_of_week = send_date.weekday()
            #–µ—Å–ª–∏ —ç—Ç–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - —á–µ—Ç–≤–µ—Ä–≥, —Ç–æ –ø—Ä–∏–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –¥–æ –ø—è—Ç–Ω–∏—Ü—ã
            if  0 <= day_of_week <= 3:
                send_date += timedelta(days = 4 - day_of_week)
            #–µ—Å–ª–∏ —ç—Ç–æ —Å—É–±–±–æ—Ç–∞ - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, —Ç–æ –≤—ã—á–∏—Ç–∞–µ–º –¥–Ω–∏ –¥–æ –ø—è—Ç–Ω–∏—Ü—ã    
            elif  5 <= day_of_week <= 6:
                send_date -= timedelta(days = day_of_week - 4)    
            send_time = datetime.combine(
                send_date,
                datetime.strptime("10:00", "%H:%M").time()
            )
            
            if send_time > datetime.now():
                scheduler.add_job(
                    send_func,
                    trigger=DateTrigger(run_date=send_time),
                    args=[employee.id],
                    id=f"poll_14days_week{week_number}_{employee.id}",
                    replace_existing=True
                )
                logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –æ–ø—Ä–æ—Å –Ω–µ–¥–µ–ª—è {week_number} –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id} –Ω–∞ {send_time}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id}: {e}")

def log_scheduler_status():
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    logger.info(
        f"Scheduler: –∑–∞–ø—É—â–µ–Ω"
    )
    global _scheduler_instance
    asyncio.run(create_all_jobs(_scheduler_instance))

async def schedule_polls():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤"""
    global _scheduler_instance
    db_settings = settings.DATABASES['default']
    if _scheduler_instance and _scheduler_instance.running:
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return _scheduler_instance
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
    db_url = f"postgresql://{db_settings['USER']}:{db_settings['PASSWORD']}@{db_settings['HOST']}:{db_settings['PORT']}/{db_settings['NAME']}"
    
    jobstores = {
        'default': SQLAlchemyJobStore(url=db_url)
    }
    
    executors = {
        'default': ThreadPoolExecutor(3)
    }
    
    job_defaults = {
        'coalesce': True,  #–æ–±—ä–µ–¥–∏–Ω—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏
        'max_instances': 3,
        'misfire_grace_time': 3600  
    }
    
    scheduler = AsyncIOScheduler(
        jobstores=jobstores,
        executors=executors,
        job_defaults=job_defaults,
        timezone="Europe/Moscow"
    )
    try:
        
        scheduler.start()
        _scheduler_instance = scheduler
        #–ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∏
        existing_jobs = scheduler.get_jobs()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(existing_jobs)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
        
        #—Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ–µ
        if not existing_jobs:
            logger.info("–•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á –ø—É—Å—Ç–æ–µ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏...")
            await create_all_jobs(scheduler)

        
        #–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        scheduler.add_job(
        log_scheduler_status,
        'interval',
        minutes=5,
        id='scheduler',
        replace_existing=True
        )
         
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        raise

async def create_all_jobs(scheduler):
    employees = await sync_to_async(
        lambda: list(Employee.objects.exclude(hire_date__isnull=True)),
        thread_sensitive=True
    )()        
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤")
    
    for employee in employees:
        if not employee.hire_date:
            continue
        
        try:
            today = datetime.now().date()
            days_employed = (today - employee.hire_date).days
            logger.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee.id}, —Ä–∞–±–æ—Ç–∞–µ—Ç {days_employed} –¥–Ω–µ–π")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤: hire_date + –∫–æ–ª-–≤–æ –º–µ—Å—è—Ü–µ–≤ + –Ω–µ–¥–µ–ª–∏
            start_weekly_polls_date_from_1_to_3 = employee.hire_date + timedelta(days=44)  # 30 –¥–Ω–µ–π + 14 –¥–Ω–µ–π
            start_weekly_polls_date_from_3_to_6 = employee.hire_date + timedelta(days=121)  # 90 –¥–Ω–µ–π + 21 –¥–µ–Ω—å
            start_weekly_polls_date_from_6_to_12 = employee.hire_date + timedelta(days=210)  # 180 –¥–Ω–µ–π + 30 –¥–Ω–µ–π
            start_weekly_polls_date_from_12_to_18 = employee.hire_date + timedelta(days=395)  #365 –¥–Ω–µ–π + 30 –¥–Ω–µ–π
            start_weekly_polls_date_from_18_to_24 = employee.hire_date + timedelta(days=575)  #545 –¥–Ω–µ–π + 30 –¥–Ω–µ–π
            start_weekly_polls_date_from_24_to_30 = employee.hire_date + timedelta(days=760)  #730 –¥–Ω–µ–π + 30 –¥–Ω–µ–π
            start_weekly_polls_date_from_30_to_36 = employee.hire_date + timedelta(days=940)  #910 –¥–Ω–µ–π + 30 –¥–Ω–µ–π
            
            
            # –î–ª—è –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (<1 –º–µ—Å—è—Ü–∞) - –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ–ø—Ä–æ—Å—ã
            if days_employed <= 30:
                if await is_user_available(employee.telegram_id):
                    schedule_poll_hire(scheduler, employee, 30, send_poll_after_1_month)
                    schedule_poll_hire(scheduler, employee, 90, send_poll_after_3_month)
                    schedule_poll_hire(scheduler, employee, 180, send_poll_after_6_month)
                    schedule_poll_hire(scheduler, employee, 365, send_poll_after_12_month)
                    schedule_poll_hire(scheduler, employee, 545, send_poll_after_18_month)
                    schedule_poll_hire(scheduler, employee, 730, send_poll_after_24_month)
                    schedule_poll_hire(scheduler, employee, 910, send_poll_after_30_month)
                    schedule_poll_hire(scheduler, employee, 1095, send_poll_after_36_month)
                    schedule_poll_tg(scheduler, employee, 14, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_1_to_3, 3, 2, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_3_to_6, 4, 3, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_6_to_12, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_12_to_18, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_18_to_24, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_24_to_30, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_30_to_36, 6, 4, send_poll_after_14_days)
            
            # –î–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö 1-3 –º–µ—Å—è—Ü–∞
            elif 30 < days_employed < 90:
                if await is_user_available(employee.telegram_id):
                    schedule_poll_hire(scheduler, employee, 90, send_poll_after_3_month)
                    schedule_poll_hire(scheduler, employee, 180, send_poll_after_6_month)
                    schedule_poll_hire(scheduler, employee, 365, send_poll_after_12_month)
                    schedule_poll_hire(scheduler, employee, 545, send_poll_after_18_month)
                    schedule_poll_hire(scheduler, employee, 730, send_poll_after_24_month)
                    schedule_poll_hire(scheduler, employee, 910, send_poll_after_30_month)
                    schedule_poll_hire(scheduler, employee, 1095, send_poll_after_36_month)
                    schedule_poll_tg(scheduler, employee, 14, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_1_to_3, 3, 2, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_3_to_6, 4, 3, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_6_to_12, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_12_to_18, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_18_to_24, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_24_to_30, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_30_to_36, 6, 4, send_poll_after_14_days)
                    
            # –î–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö 3-6 –º–µ—Å—è—Ü–µ–≤
            elif 90 <= days_employed < 180:
                if await is_user_available(employee.telegram_id):
                    schedule_poll_hire(scheduler, employee, 180, send_poll_after_6_month)
                    schedule_poll_hire(scheduler, employee, 365, send_poll_after_12_month)
                    schedule_poll_hire(scheduler, employee, 545, send_poll_after_18_month)
                    schedule_poll_hire(scheduler, employee, 730, send_poll_after_24_month)
                    schedule_poll_hire(scheduler, employee, 910, send_poll_after_30_month)
                    schedule_poll_hire(scheduler, employee, 1095, send_poll_after_36_month)
                    schedule_poll_tg(scheduler, employee, 14, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_3_to_6, 4, 3, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_6_to_12, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_12_to_18, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_18_to_24, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_24_to_30, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_30_to_36, 6, 4, send_poll_after_14_days)
                    
            # –î–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö 6-12 –º–µ—Å—è—Ü–µ–≤ 
            elif 180 <= days_employed < 365:
                if await is_user_available(employee.telegram_id):
                    schedule_poll_hire(scheduler, employee, 365, send_poll_after_12_month)
                    schedule_poll_hire(scheduler, employee, 545, send_poll_after_18_month)
                    schedule_poll_hire(scheduler, employee, 730, send_poll_after_24_month)
                    schedule_poll_hire(scheduler, employee, 910, send_poll_after_30_month)
                    schedule_poll_hire(scheduler, employee, 1095, send_poll_after_36_month)
                    schedule_poll_tg(scheduler, employee, 14, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_6_to_12, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_12_to_18, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_18_to_24, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_24_to_30, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_30_to_36, 6, 4, send_poll_after_14_days)
                    
            # –î–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö 12-18 –º–µ—Å—è—Ü–µ–≤       
            elif 365 <= days_employed < 545:
                if await is_user_available(employee.telegram_id):
                    schedule_poll_hire(scheduler, employee, 545, send_poll_after_18_month)
                    schedule_poll_hire(scheduler, employee, 730, send_poll_after_24_month)
                    schedule_poll_hire(scheduler, employee, 910, send_poll_after_30_month)
                    schedule_poll_hire(scheduler, employee, 1095, send_poll_after_36_month)
                    schedule_poll_tg(scheduler, employee, 14, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_12_to_18, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_18_to_24, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_24_to_30, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_30_to_36, 6, 4, send_poll_after_14_days)
            
            # –î–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö 18-24 –º–µ—Å—è—Ü–µ–≤       
            elif 545 <= days_employed < 730:
                if await is_user_available(employee.telegram_id):
                    schedule_poll_hire(scheduler, employee, 730, send_poll_after_24_month)
                    schedule_poll_hire(scheduler, employee, 910, send_poll_after_30_month)
                    schedule_poll_hire(scheduler, employee, 1095, send_poll_after_36_month)
                    schedule_poll_tg(scheduler, employee, 14, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_18_to_24, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_24_to_30, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_30_to_36, 6, 4, send_poll_after_14_days)
            
            # –î–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö 24-30 –º–µ—Å—è—Ü–µ–≤       
            elif 730 <= days_employed < 910:
                if await is_user_available(employee.telegram_id):
                    schedule_poll_hire(scheduler, employee, 910, send_poll_after_30_month)
                    schedule_poll_hire(scheduler, employee, 1095, send_poll_after_36_month)
                    schedule_poll_tg(scheduler, employee, 14, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_24_to_30, 6, 4, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_30_to_36, 6, 4, send_poll_after_14_days)
            
                # –î–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö 30-36 –º–µ—Å—è—Ü–µ–≤       
            elif 910 <= days_employed < 1095:
                if await is_user_available(employee.telegram_id):
                    schedule_poll_hire(scheduler, employee, 1095, send_poll_after_36_month)
                    schedule_poll_tg(scheduler, employee, 14, send_poll_after_14_days)
                    schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_30_to_36, 6, 4, send_poll_after_14_days)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id}: {e}")
            continue
