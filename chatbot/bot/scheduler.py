import asyncio
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
import sys
from bot.create_bot import bot, dp 
from core.models import *
from asgiref.sync import sync_to_async
from bot.handlers.after_1_month import Form_1
from bot.handlers.after_3_month import Form_3
from bot.handlers.after_6_month import Form_6
from bot.handlers.after_12_month import Form_12
from bot.handlers.after_14_days import Form_14
from bot.keyboards import ready_kb
import logging
from channels.db import database_sync_to_async


async def has_completed_poll(employee_id, poll_name):
    try:
        poll = await sync_to_async(Poll.objects.get, thread_sensitive=True)(name=poll_name)
        queryset = Answer.objects.filter(login_id=employee_id, question__poll=poll)
        exists = await sync_to_async(queryset.exists, thread_sensitive=True)()
        return exists
    except Poll.DoesNotExist:
        return False


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def is_user_available(telegram_id):
    try:
        current_state = await dp.fsm.get_context(
            bot=bot,
            chat_id=telegram_id,
            user_id=telegram_id
        ).get_state()
        return current_state is None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return True

async def send_poll_after_14_days(employee_id):
    if (not await has_completed_poll(employee_id, "–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 14 –¥–Ω–µ–π")): #–µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–ø—Ä–æ—Å
        try:
            employee = await sync_to_async(Employee.objects.get, thread_sensitive=True)(id=employee_id)
            if not await is_user_available(employee.telegram_id):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {employee.telegram_id} –∑–∞–Ω—è—Ç, –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 14 –¥–Ω–µ–π –æ—Ç–ª–æ–∂–µ–Ω")
                return
            state = dp.fsm.get_context(
                bot=bot,
                chat_id=employee.telegram_id,
                user_id=employee.telegram_id
            )
            await state.set_state(Form_14.question_1)
            
            await bot.send_message(
                chat_id=employee.telegram_id,
                text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –º–æ–ª–æ–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç! üëã\n\n'
                           '–≠—Ç–æ —è ‚Äì –ì–∞–∑–æ–ø—Ç–∏–∫—É–º, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫! \n'
                           '–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?\n'
                           '–û—Ç–º–µ—Ç—å –≤ –æ–ø—Ä–æ—Å–µ –Ω–∏–∂–µ ‚¨á')
            
            await bot.send_poll(
                chat_id=employee.telegram_id,
                question="–ö–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?",
                options=["–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ! üëç", "–í—Å–µ —Ö–æ—Ä–æ—à–æ! üòä", "–°—Ä–µ–¥–Ω–µ", "–•–æ—Ç–µ–ª–æ—Å—å –±—ã, —á—Ç–æ–± –±—ã–ª–æ –ª—É—á—à–µ ‚Ä¶üôÅ", "–í—Å–µ –ø–ª–æ—Ö–æ! üò¢"],
                is_anonymous=False,
                allows_multiple_answers=False,
                type="regular"
            )              
            await state.update_data(poll_options=["–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ! üëç", "–í—Å–µ —Ö–æ—Ä–æ—à–æ! üòä", "–°—Ä–µ–¥–Ω–µ", "–•–æ—Ç–µ–ª–æ—Å—å –±—ã, —á—Ç–æ–± –±—ã–ª–æ –ª—É—á—à–µ ‚Ä¶üôÅ", "–í—Å–µ –ø–ª–æ—Ö–æ! üò¢"])
            await bot.send_message(
                chat_id=employee.telegram_id,
                text="–ö–∞–∫ –æ–±—Å—Ç–æ—è—Ç –¥–µ–ª–∞ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π —Ç–≤–æ–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏? –û–ø–∏—à–∏ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö ‚¨á"
            )
            await state.set_state(Form_14.question_3)
            logger.info(f"–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 14 –¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}")

        except Exception as e:
            from bot.config import add_to_blocked
            add_to_blocked(employee.telegram_id)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 14 –¥–Ω–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}: {e}")

async def send_poll_after_1_month(employee_id):
    if (not await has_completed_poll(employee_id, "–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü")): #–µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–ø—Ä–æ—Å
        try:
            employee = await sync_to_async(Employee.objects.get, thread_sensitive=True)(id=employee_id)
            if not await is_user_available(employee.telegram_id):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {employee.telegram_id} –∑–∞–Ω—è—Ç, –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 1 –º–µ—Å—è—Ü –æ—Ç–ª–æ–∂–µ–Ω")
                return
            state = dp.fsm.get_context(
                bot=bot,
                chat_id=employee.telegram_id,
                user_id=employee.telegram_id
            )
            await state.set_state(Form_1.how_are_you)
            
            await bot.send_message(
                chat_id=employee.telegram_id,
                text='–ü—Ä–∏–≤–µ—Ç!\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–µ—Ä–≤—ã–º –º–µ—Å—è—Ü–µ–º –≤ –∫–æ–º–∞–Ω–¥–µ!\n\n'
                    '–ß—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å, –∫–∞–∫ –∏–¥—É—Ç –¥–µ–ª–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –ø–æ —á–µ–∫-–ª–∏—Å—Ç—É.\n\n'
                    '–ì–æ—Ç–æ–≤(–∞)? –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤(–∞)¬ª',
                reply_markup=await ready_kb(employee.telegram_id)
            )
            
            logger.info(f"–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 1 –º–µ—Å—è—Ü –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}")

        except Exception as e:
            from bot.config import add_to_blocked
            add_to_blocked(employee.telegram_id)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 1 –º–µ—Å—è—Ü —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}: {e}")

async def send_poll_after_3_month(employee_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞ –ø–æ—Å–ª–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    if (not await has_completed_poll(employee_id, "–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞")): #–µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–ø—Ä–æ—Å
        try:
            employee = await sync_to_async(Employee.objects.get, thread_sensitive=True)(id=employee_id)
            if not await is_user_available(employee.telegram_id):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {employee.telegram_id} –∑–∞–Ω—è—Ç, –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞ –æ—Ç–ª–æ–∂–µ–Ω")
                return

            state = dp.fsm.get_context(
                bot=bot,
                chat_id=employee.telegram_id,
                user_id=employee.telegram_id
            )
            await state.set_state(Form_3.how_are_you)
            
            await bot.send_message(
                chat_id=employee.telegram_id,
                text='–ü—Ä–∏–≤–µ—Ç!\n\n'
                    '–¢—Ä–∏ –º–µ—Å—è—Ü–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n'
                    '–¢–≤–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É, –∏ –º–Ω–µ –≤–∞–∂–Ω–æ —É–∑–Ω–∞—Ç—å, '
                    '–∫–∞–∫ —É —Ç–µ–±—è –∏–¥—É—Ç –¥–µ–ª–∞. –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                    '–æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n'
                    '–ì–æ—Ç–æ–≤(–∞)? –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤(–∞)¬ª',
                reply_markup=await ready_kb(employee.telegram_id)
            )
            logger.info(f"–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}")
        except Exception as e:
            from bot.config import add_to_blocked
            add_to_blocked(employee.telegram_id)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}: {e}")

async def send_poll_after_6_month(employee_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤ –ø–æ—Å–ª–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    if (not await has_completed_poll(employee_id, "–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤")): #–µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–ø—Ä–æ—Å
        try:
            employee = await sync_to_async(Employee.objects.get, thread_sensitive=True)(id=employee_id)
            if not await is_user_available(employee.telegram_id):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {employee.telegram_id} –∑–∞–Ω—è—Ç, –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤ –æ—Ç–ª–æ–∂–µ–Ω")
                return

            state = dp.fsm.get_context(
                bot=bot,
                chat_id=employee.telegram_id,
                user_id=employee.telegram_id
            )
            await state.set_state(Form_6.how_are_you)
            
            await bot.send_message(
                chat_id=employee.telegram_id,
                text='–ü—Ä–∏–≤–µ—Ç!\n\n'
                    '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º —ç–∫–≤–∞—Ç–æ—Ä–∞ —Ç—Ä—É–¥–æ–≤–æ–≥–æ —Å—Ç–∞–∂–∞ –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏! '
                    '–ó–∞ —ç—Ç–æ—Ç –≥–æ–¥ —Ç—ã, –Ω–µ—Å–æ–º–Ω–µ–Ω–Ω–æ, –ø—Ä–∏–æ–±—Ä–µ–ª –Ω–µ–º–∞–ª–æ –∑–Ω–∞–Ω–∏–π –∏ –æ–ø—ã—Ç–∞.\n\n'
                    '–ü–æ–¥–µ–ª–∏—à—å—Å—è, –∫–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è —Ç–≤–æ—è —Ä–∞–±–æ—Ç–∞? –û—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Ç–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é.\n\n'
                    '–ì–æ—Ç–æ–≤(–∞)? –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤(–∞)¬ª',
                reply_markup=await ready_kb(employee.telegram_id)
            )
            logger.info(f"–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}")
        except Exception as e:
            from bot.config import add_to_blocked
            add_to_blocked(employee.telegram_id)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}: {e}")
            
async def send_poll_after_12_month(employee_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 12 –º–µ—Å—è—Ü–µ–≤ –ø–æ—Å–ª–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    if (not await has_completed_poll(employee_id, "–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 12 –º–µ—Å—è—Ü–µ–≤")): #–µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–ø—Ä–æ—Å
        try:
            employee = await sync_to_async(Employee.objects.get, thread_sensitive=True)(id=employee_id)
            if not await is_user_available(employee.telegram_id):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {employee.telegram_id} –∑–∞–Ω—è—Ç, –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 12 –º–µ—Å—è—Ü–µ–≤ –æ—Ç–ª–æ–∂–µ–Ω")
                return

            state = dp.fsm.get_context(
                bot=bot,
                chat_id=employee.telegram_id,
                user_id=employee.telegram_id
            )
            await state.set_state(Form_12.how_are_you)
            
            await bot.send_message(
                chat_id=employee.telegram_id,
                text='–ü—Ä–∏–≤–µ—Ç!\n\n'
                           '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–µ—Ä–≤—ã–º —Ç—Ä—É–¥–æ–≤—ã–º –≥–æ–¥–æ–º –≤ –Ω–∞—à–µ–π –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ! '
                           '–ó–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –≥–æ–¥ —Ç—ã —Å—Ç–∞–ª –≤–∞–∂–Ω–æ–π —á–∞—Å—Ç—å—é –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞, –≤–Ω–µ—Å –æ–≥—Ä–æ–º–Ω—ã–π –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –¥–æ–∫–∞–∑–∞–ª —Å–≤–æ—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º.\n'
                           '–¢—ã –ø—Ä–æ–¥–µ–ª–∞–ª –±–æ–ª—å—à—É—é —Ä–∞–±–æ—Ç—É –∏ –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ —É—Å–ø–µ–ª –Ω–∞–∫–æ–ø–∏—Ç—å –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π –∏ –æ–ø—ã—Ç–∞. \n'
                           '–ü–æ–¥–µ–ª–∏—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –ø–µ—Ä–≤–æ–º —Ä–∞–±–æ—á–µ–º –≥–æ–¥—É, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –∏ —É—Å–ø–µ—Ö–∞—Ö, –∫–æ—Ç–æ—Ä—ã–º–∏ –≥–æ—Ä–¥–∏—à—å—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ. –ê —Ç–∞–∫–∂–µ –ø–æ–¥–µ–ª–∏—Å—å –∏–¥–µ—è–º–∏, –∫–∞–∫ –º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à—É —Å–æ–≤–º–µ—Å—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É –µ—â—ë —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ.\n'
                           '–ì–æ—Ç–æ–≤(–∞)? –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤(–∞)¬ª', reply_markup = await ready_kb(employee.telegram_id))
            
            logger.info(f"–û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 12 –º–µ—Å—è—Ü–µ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}")
        except Exception as e:
            from bot.config import add_to_blocked
            add_to_blocked(employee.telegram_id)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 12 –º–µ—Å—è—Ü–µ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}: {e}")            

def schedule_poll_hire(scheduler, employee, days_delta, send_func):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –æ–ø—Ä–æ—Å–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ—Å–ª–µ hire_date"""
    try:
        send_date = employee.hire_date + timedelta(days=days_delta)
        send_time = datetime.combine(
            send_date,
            datetime.strptime("10:00", "%H:%M").time()
        )
        logger.info(f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {employee.id}: {send_time}")

        
        if send_time > datetime.now():
            scheduler.add_job(
                send_func,
                trigger=DateTrigger(run_date=send_time),
                args=[employee.id],
                id=f"poll_{days_delta}days_{employee.id}",
                replace_existing=True
            )
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ {days_delta} –¥–Ω–µ–π –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id} –Ω–∞ {send_time}")
        else:
            scheduler.add_job(
                send_func,
                trigger=DateTrigger(run_date=datetime.now()),
                args=[employee.id],
                id=f"poll_immediate_{employee.id}",
                replace_existing=True
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id}: {e}")

def schedule_poll_tg(scheduler, employee, days_delta, send_func):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –æ–ø—Ä–æ—Å–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ"""
    try:
        send_date = employee.telegram_registration_date + timedelta(days=days_delta)
        send_time = datetime.combine(
            send_date,
            datetime.strptime("10:00", "%H:%M").time()
        )
        logger.info(f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {employee.id}: {send_time}")

        
        if send_time > datetime.now():
            scheduler.add_job(
                send_func,
                trigger=DateTrigger(run_date=send_time),
                args=[employee.id],
                id=f"poll_{days_delta}days_{employee.id}",
                replace_existing=True
            )
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ {days_delta} –¥–Ω–µ–π –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id} –Ω–∞ {send_time}")
        else:
            scheduler.add_job(
                send_func,
                trigger=DateTrigger(run_date=datetime.now()),
                args=[employee.id],
                id=f"poll_immediate_{employee.id}",
                replace_existing=True
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id}: {e}")

def schedule_weekly_polls(scheduler, employee, start_date, times, send_func):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–ø—Ä–æ—Å—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ –Ω–µ–¥–µ–ª—é –Ω–∞—á–∏–Ω–∞—è —Å start_date"""
    try:
        for week_number in range(1, times + 1):  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å
            send_date = start_date + timedelta(weeks=week_number - 1)
            send_time = datetime.combine(
                send_date,
                datetime.strptime("10:00", "%H:%M").time()
            )
            
            if send_time > datetime.now():
                scheduler.add_job(
                    send_func,
                    trigger=DateTrigger(run_date=send_time),
                    args=[employee.id],
                    id=f"poll_14days_week{week_number}_{employee.id}",
                    replace_existing=True
                )
                logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –æ–ø—Ä–æ—Å –Ω–µ–¥–µ–ª—è {week_number} –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id} –Ω–∞ {send_time}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id}: {e}")

async def log_scheduler_status(scheduler: AsyncIOScheduler):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    logger.info(
        f"Scheduler: –∑–∞–ø—É—â–µ–Ω"
    )

async def schedule_polls():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤"""
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    try:
        #–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        scheduler.add_job(
        log_scheduler_status,
        'interval',
        minutes=5,
        args=[scheduler],
        id='scheduler',
        replace_existing=True
        )
         
        employees = await sync_to_async(
            lambda: list(Employee.objects.exclude(hire_date__isnull=True)),
            thread_sensitive=True
        )()        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤")
        
        for employee in employees:
            if not employee.hire_date:
                continue
            
            try:
                today = datetime.now().date()
                days_employed = (today - employee.hire_date).days
                logger.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee.id}, —Ä–∞–±–æ—Ç–∞–µ—Ç {days_employed} –¥–Ω–µ–π")
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤: hire_date + –∫–æ–ª-–≤–æ –º–µ—Å—è—Ü–µ–≤ + 1 –Ω–µ–¥–µ–ª—è
                start_weekly_polls_date_from_1_to_3 = employee.hire_date + timedelta(days=37)  # 30 –¥–Ω–µ–π + 7 –¥–Ω–µ–π
                start_weekly_polls_date_from_3_to_6 = employee.hire_date + timedelta(days=97)  # 90 –¥–Ω–µ–π + 7 –¥–Ω–µ–π
                
                
                # –î–ª—è –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (<1 –º–µ—Å—è—Ü–∞) - –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ–ø—Ä–æ—Å—ã
                if days_employed < 30:
                    if await is_user_available(employee.telegram_id):
                        schedule_poll_hire(scheduler, employee, 30, send_poll_after_1_month)
                        schedule_poll_hire(scheduler, employee, 90, send_poll_after_3_month)
                        schedule_poll_hire(scheduler, employee, 180, send_poll_after_6_month)
                        schedule_poll_hire(scheduler, employee, 365, send_poll_after_12_month)
                        schedule_poll_tg(scheduler, employee, 14, send_poll_after_14_days)
                        schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_1_to_3, 7, send_poll_after_14_days)
                        schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_3_to_6, 12, send_poll_after_14_days)
                
                # –î–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö 1-3 –º–µ—Å—è—Ü–∞
                elif 30 <= days_employed < 90:
                    if await is_user_available(employee.telegram_id):
                        schedule_poll_hire(scheduler, employee, 90, send_poll_after_3_month)
                        schedule_poll_hire(scheduler, employee, 180, send_poll_after_6_month)
                        schedule_poll_hire(scheduler, employee, 365, send_poll_after_12_month)
                        schedule_poll_tg(scheduler, employee, 14, send_poll_after_14_days)
                        schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_1_to_3, 7, send_poll_after_14_days)
                        schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_3_to_6, 12, send_poll_after_14_days)
                
                # –î–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö 3-6 –º–µ—Å—è—Ü–µ–≤
                elif 90 <= days_employed < 180:
                    if await is_user_available(employee.telegram_id):
                        schedule_poll_hire(scheduler, employee, 180, send_poll_after_6_month)
                        schedule_poll_hire(scheduler, employee, 365, send_poll_after_12_month)
                        schedule_poll_tg(scheduler, employee, 14, send_poll_after_14_days)
                        schedule_weekly_polls(scheduler, employee, start_weekly_polls_date_from_3_to_6, 12, send_poll_after_14_days)
                
                # –î–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö 6-12 –º–µ—Å—è—Ü–µ–≤ 
                elif 180 <= days_employed < 365:
                    if await is_user_available(employee.telegram_id):
                        schedule_poll_hire(scheduler, employee, 365, send_poll_after_12_month)
                        schedule_poll_tg(scheduler, employee, 14, send_poll_after_14_days)
                        
                # –î–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –±–æ–ª—å—à–µ –≥–æ–¥–∞       
                else:
                    if await is_user_available(employee.telegram_id):
                        schedule_poll_hire(scheduler, employee, 365, send_poll_after_12_month)
                        schedule_poll_tg(scheduler, employee, 14, send_poll_after_14_days)
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id}: {e}")
                continue
        
        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        raise

# import asyncio
# from datetime import datetime, timedelta
# from apscheduler.schedulers.asyncio import AsyncIOScheduler
# from apscheduler.triggers.date import DateTrigger
# from create_bot import bot, dp
# from core.models import Employee
# from asgiref.sync import sync_to_async
# from handlers.after_1_month import Form_1
# from handlers.after_3_month import Form_3
# from handlers.after_6_month import Form_6
# from bot.keyboards import ready_kb

# # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 1 –º–µ—Å—è—Ü –ø–æ—Å–ª–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
# async def send_poll_after_1_month(employee_id):
#     employee = await sync_to_async(Employee.objects.get)(id = employee_id)
#     state = dp.fsm.get_context(bot = bot, chat_id = employee.telegram_id, user_id = employee.telegram_id)
#     await state.set_state(Form_1.how_are_you)
#     await bot.send_message(
#         chat_id = employee.telegram_id,
#         text = '–ü—Ä–∏–≤–µ—Ç!\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–µ—Ä–≤—ã–º –º–µ—Å—è—Ü–µ–º –≤ –∫–æ–º–∞–Ω–¥–µ!\n\n'
#         '–ß—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å, –∫–∞–∫ –∏–¥—É—Ç –¥–µ–ª–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –ø–æ —á–µ–∫-–ª–∏—Å—Ç—É.\n\n'
#         '–ì–æ—Ç–æ–≤(–∞)? –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤(–∞)¬ª',
#         reply_markup = ready_kb(employee.telegram_id)
#     )

# # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞ –ø–æ—Å–ª–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
# async def send_poll_after_3_month(employee_id):
#     employee = await sync_to_async(Employee.objects.get)(id = employee_id)
#     state = dp.fsm.get_context(bot = bot, chat_id = employee.telegram_id, user_id = employee.telegram_id)
#     await state.set_state(Form_3.how_are_you)
#     await bot.send_message(
#         chat_id = employee.telegram_id,
#         text = '–ü—Ä–∏–≤–µ—Ç!\n\n'
#         '–¢—Ä–∏ –º–µ—Å—è—Ü–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n'
#         '–¢–≤–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É, –∏ –º–Ω–µ –≤–∞–∂–Ω–æ —É–∑–Ω–∞—Ç—å, '
#         '–∫–∞–∫ —É —Ç–µ–±—è –∏–¥—É—Ç –¥–µ–ª–∞. –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, '
#         '–æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n'
#         '–ì–æ—Ç–æ–≤(–∞)? –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤(–∞)¬ª', reply_markup = ready_kb(employee.telegram_id)
#     )

# # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤ –ø–æ—Å–ª–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
# async def send_poll_after_6_month(employee_id):
#     employee = await sync_to_async(Employee.objects.get)(id = employee_id)
#     state = dp.fsm.get_context(bot = bot, chat_id = employee.telegram_id, user_id = employee.telegram_id)
#     await state.set_state(Form_6.how_are_you)
#     await bot.send_message(
#         chat_id = employee.telegram_id,
#         text = '–ü—Ä–∏–≤–µ—Ç!\n\n'
#         '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º —ç–∫–≤–∞—Ç–æ—Ä–∞ —Ç—Ä—É–¥–æ–≤–æ–≥–æ —Å—Ç–∞–∂–∞ –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏! '
#         '–ó–∞ —ç—Ç–æ—Ç –≥–æ–¥ —Ç—ã, –Ω–µ—Å–æ–º–Ω–µ–Ω–Ω–æ, –ø—Ä–∏–æ–±—Ä–µ–ª –Ω–µ–º–∞–ª–æ –∑–Ω–∞–Ω–∏–π –∏ –æ–ø—ã—Ç–∞.\n\n'
#         '–ü–æ–¥–µ–ª–∏—à—å—Å—è, –∫–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è —Ç–≤–æ—è —Ä–∞–±–æ—Ç–∞? –û—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Ç–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é.\n\n'
#         '–ì–æ—Ç–æ–≤(–∞)? –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤(–∞)¬ª', reply_markup = ready_kb(employee.telegram_id)
#     )

# # –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –æ–ø—Ä–æ—Å–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
# # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç: scheduler - –æ–±—ä–µ–∫—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞, employee - –æ–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, 
# # days_delta - —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ—Å–ª–µ hire_date –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å, 
# # send_func - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞
# def schedule_poll_hire(scheduler, employee, days_delta, send_func):
#     send_date = employee.hire_date + timedelta(days = days_delta)
#     send_time = datetime.combine(
#         send_date,
#         datetime.strptime("10:00", "%H:%M").time()
#     ).replace(tzinfo = None)
#     if send_time > datetime.now():
#         scheduler.add_job(
#             send_func,
#             trigger = DateTrigger(run_date = send_time),
#             args = [employee.id],
#             id = f"poll_{days_delta}days_{employee.id}",
#             replace_existing = True
#         )
#     else:
#         asyncio.create_task(send_func(employee.id))

# # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–ø—Ä–æ—Å–æ–≤
# async def schedule_poll_hires():
#     scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
#     try:
#         employees = await sync_to_async(list)(Employee.objects.exclude(hire_date__isnull = True))
#         for employee in employees:
#             if not employee.hire_date:
#                 continue
#             try:
#                 # –û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 1 –º–µ—Å—è—Ü
#                 schedule_poll_hire(schedule = scheduler, employee = employee,
#                               days_delta = 30, send_func = send_poll_after_1_month)
#                 # –û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞
#                 schedule_poll_hire(scheduler = scheduler, employee = employee,
#                               days_delta = 90, send_func = send_poll_after_3_month)
#                 # –û–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤
#                 schedule_poll_hire(scheduler = scheduler, employee = employee,
#                               days_delta = 180, send_func = send_poll_after_6_month)
#             except Exception as e:
#                 print(f"–û—à–∏–±–∫–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id}: {e}")
#                 continue
#         scheduler.start()
#     except Exception as e:
#         print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
#         raise