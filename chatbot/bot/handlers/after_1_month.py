import asyncio
from bot.create_bot import bot, dp
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils.chat_action import ChatActionSender
from datetime import date, timedelta
from bot.keyboards import ready_kb, yes_or_no_kb, question_kb, yes_or_no_maybe_kb # –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from aiogram.types import FSInputFile, InputMediaPhoto
import os
from create_bot import media_dir 
from asgiref.sync import sync_to_async
from aiogram.types import Message
from core.models import Employee, Answer, Poll
from keyboards import recommendations_kb

# –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
short_delay = 1
long_delay = 1

# —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class Form_1(StatesGroup):
    how_are_you = State()
    track_passing = State()
    question_1 = State()
    yes_question_2 = State()
    yes_question_3 = State()
    question_2 = State()
    question_3 = State()
    question_4 = State()
    question_5 = State()
    question_6 = State()
    question_7 = State()
    question_8 = State()
    question_9 = State()
    question_10 = State()
    question_11 = State()
    question_12 = State()
    question_13 = State()
    question_14 = State()
    question_15 = State()
    question_16 = State()
    question_17 = State()
    question_18 = State()
    question_19 = State()
    result = State()
    recommendations = State()
    
after_1_month_router = Router()

# –ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ–≥–æ telegram id
# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç: telegram_id ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ telegram
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –æ–±—ä–µ–∫—Ç Employee –∏–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
async def get_employee(telegram_id):
    return await sync_to_async(Employee.objects.get)(telegram_id = telegram_id)

# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç: employee ‚Äî —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –æ—Ç–≤–µ—Ç–∏–≤—à–∏–π –Ω–∞ –≤–æ–ø—Ä–æ—Å, message_text ‚Äî —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞, question_id ‚Äî id –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def save_answer(employee, message_text, question_id):
    today = date.today()
    delta = today - employee.hire_date
    days_passed = delta.days
    employee_answer = Answer(
        name = message_text,
        login_id = employee.id,
        question_id = question_id - 1
    )
    await sync_to_async(employee_answer.save)()

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ –∑–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç: message ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, state ‚Äî —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞, next_state ‚Äî —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ None –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è,
# question_text ‚Äî —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, question_id ‚Äî id —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, reply_markup (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ‚Äî –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
async def handle_question(message: Message, state: FSMContext, next_state, question_text, question_id, reply_markup = None):
    telegram_id = message.from_user.id
    employee = await get_employee(telegram_id)
    await save_answer(employee, message.text, question_id)
    async with ChatActionSender.typing(bot=bot, chat_id = message.chat.id):
        await asyncio.sleep(short_delay)
        await message.answer(question_text, reply_markup = reply_markup)
    if next_state:
        await state.set_state(next_state)

# –ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç: message ‚Äî –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, state ‚Äî —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞, question_id (int, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ‚Äî id –≤–æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
async def finish_poll(message: Message, state: FSMContext, question_id=None):
    if question_id:
        telegram_id = message.from_user.id
        employee = await get_employee(telegram_id)
        await save_answer(employee, message.text, question_id)
    async with ChatActionSender.typing(bot = bot, chat_id = message.chat.id):
        await asyncio.sleep(short_delay)
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª—ë–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ! üëê\n"
            "–í—Å–µ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã –∫—É—Ä–∞—Ç–æ—Ä–æ–º. –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–ª–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤, –æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π ‚úå"
        )
    async with ChatActionSender.typing(bot = bot, chat_id = message.chat.id):
        await asyncio.sleep(long_delay)
        await message.answer('–í –ø–æ–º–æ—â—å —è –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –≤—ã—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ!\n'
                             '–ñ–º–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª\n'
                             '–î–æ —Å–≤—è–∑–∏! üí¨', reply_markup = await recommendations_kb(message.from_user.id))   

    await state.set_state(Form_1.recommendations)

@after_1_month_router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", Form_1.recommendations) # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º Form.recommendations
async def how_are_you(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot = bot, chat_id = message.chat.id):
        await asyncio.sleep(long_delay)
        recommendations = [
            InputMediaPhoto(
            media = FSInputFile(path = os.path.join(media_dir, 'recommendations2','1.jpg'))),
            InputMediaPhoto(
            media = FSInputFile(path = os.path.join(media_dir, 'recommendations2','2.jpg'))),
            InputMediaPhoto(
            media = FSInputFile(path = os.path.join(media_dir, 'recommendations2','3.jpg'))),
            InputMediaPhoto(
            media = FSInputFile(path = os.path.join(media_dir, 'recommendations2','4.jpg'))),
            InputMediaPhoto(
            media = FSInputFile(path = os.path.join(media_dir, 'recommendations2','5.jpg'))),
            InputMediaPhoto(
            media = FSInputFile(path = os.path.join(media_dir, 'recommendations2','6.jpg'))),
            InputMediaPhoto(
            media = FSInputFile(path = os.path.join(media_dir, 'recommendations2','7.jpg'))),
        ]
        await message.answer_media_group(media=recommendations)
    await state.clear()    

@after_1_month_router.message(Command('after_1_month'))
async def start_poll_after_1_month(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id = message.chat.id):
        await asyncio.sleep(short_delay)
        await message.answer('–ü—Ä–∏–≤–µ—Ç!\n\n'
                             '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å —É—Å–ø–µ—à–Ω—ã–º —Å—Ç–∞—Ä—Ç–æ–º –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ ‚Äî –ø—Ä–æ—à—ë–ª —É–∂–µ —Ü–µ–ª—ã–π –º–µ—Å—è—Ü! \n'
                             '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –≤–º–µ—Å—Ç–µ —É–≤–∏–¥–µ—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ –∏–¥—ë—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å –ø–æ —á–µ–∫-–ª–∏—Å—Ç—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.\n'
                             '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤(–∞)!¬ª, –∏ –º—ã –Ω–∞—á–Ω–µ–º –Ω–∞—à –¥–∏–∞–ª–æ–≥!', reply_markup = await ready_kb(message.from_user.id))
    await state.set_state(Form_1.how_are_you)

@after_1_month_router.message(F.text == "–ì–æ—Ç–æ–≤(–∞)", Form_1.how_are_you)
async def how_are_you(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await asyncio.sleep(short_delay)
        await message.answer(
            "–ö–∞–∫ –æ–±—Å—Ç–æ—è—Ç –¥–µ–ª–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ä–µ–¥–µ?",
            reply_markup=ReplyKeyboardRemove()
        )
    await state.set_state(Form_1.question_1)

@after_1_month_router.message(F.text, Form_1.question_1)
async def track_passing(message: Message, state: FSMContext):
    await handle_question(message, state, Form_1.question_2, "–£–¥–∞–ª–æ—Å—å –ª–∏ –∑–∞–π—Ç–∏ –≤ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ì–ò–î?", 2, await yes_or_no_maybe_kb(message.from_user.id))

@after_1_month_router.message(
    (F.text.lower() == "–¥–∞"),
    Form_1.question_2  
)
async def question_1_yes(message: Message, state: FSMContext):
    await handle_question(message, state, Form_1.yes_question_3, "–ë—ã–ª –ª–∏ –ø–æ–ª–µ–∑–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –¥–ª—è —Ç–µ–±—è —Ç—Ä–µ–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏?", 3, reply_markup=ReplyKeyboardRemove())
    
@after_1_month_router.message(F.text, Form_1.yes_question_3)
async def yes_question_2(message: Message, state: FSMContext):
    await handle_question(message, state, Form_1.question_4, "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ?", 4)

@after_1_month_router.message(F.text, Form_1.question_4)
async def yes_question_3(message: Message, state: FSMContext):
    await handle_question(message, state, Form_1.question_5, "–ï—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ?", 5)

@after_1_month_router.message(F.text, Form_1.question_5)
async def question_1_no(message: Message, state: FSMContext):
    await handle_question(message, state, Form_1.question_7, "–¢—ã –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª (–∞) –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞?", 6)

@after_1_month_router.message(
    F.text.in_(["–ù–µ—Ç", "–ù–µ –∏–º–µ—é –ø–æ–Ω—è—Ç–∏—è, —á—Ç–æ –∑–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"]), 
    Form_1.question_2
)
async def question_1_no(message: Message, state: FSMContext):
    await handle_question(message, state, Form_1.question_7, "–¢—ã –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª (–∞) –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞?", 6, reply_markup=ReplyKeyboardRemove())

@after_1_month_router.message(F.text, Form_1.question_7)
async def question_2(message: Message, state: FSMContext):
    await handle_question(message, state, Form_1.question_8, "–ê –æ–±—Ö–æ–¥–Ω–æ–π –ª–∏—Å—Ç –ø—Ä–æ—à–µ–ª(–∞)?", 7)

@after_1_month_router.message(F.text, Form_1.question_8)
async def question_3(message: Message, state: FSMContext):
    await handle_question(message, state, Form_1.question_9, "–ü—Ä–æ—à–µ–ª(–∞) –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–∏? –ö–∞–∫–∏–µ, —Ä–∞—Å—Å–∫–∞–∂–µ—à—å?", 8)

@after_1_month_router.message(F.text, Form_1.question_9)
async def question_4(message: Message, state: FSMContext):
    await handle_question(message, state, Form_1.question_10, "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ. –ö–∞–∫–æ–µ –æ–Ω–æ —É —Ç–µ–±—è?", 9)

@after_1_month_router.message(F.text, Form_1.question_10)
async def question_5(message: Message, state: FSMContext):
    await handle_question(message, state, Form_1.question_11, "–í—Å–µ –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –µ—Å—Ç—å –≤ –Ω–µ–º?", 10)

@after_1_month_router.message(F.text, Form_1.question_11)
async def question_6(message: Message, state: FSMContext):
    await handle_question(message, state, Form_1.question_12, "–í—Å–µ –ª–∏ –¥–æ—Å—Ç—É–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–º–µ—é—Ç—Å—è —É —Ç–µ–±—è? –ü–ö, –ø—Ä–æ–ø—É—Å–∫? –ö–∞–∫–∏—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç?", 11)
    
@after_1_month_router.message(F.text, Form_1.question_12)
async def question_7(message: Message, state: FSMContext):
    await handle_question(message, state, Form_1.question_13, "–¢–µ–±–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ –ø—Ä–æ —Ç–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏?", 12)

@after_1_month_router.message(F.text, Form_1.question_13)
async def question_8(message: Message, state: FSMContext):
    await handle_question(message, state, Form_1.question_14, "–û–Ω–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ç–µ–º, —á—Ç–æ –∑–∞—è–≤–ª—è–ª–∏ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è?", 13)

@after_1_month_router.message(F.text, Form_1.question_14)
async def question_9(message: Message, state: FSMContext):
    await handle_question(message, state, Form_1.question_15, "–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ–ª—É—á–∞–µ—à—å —Ç—Ä—É–¥–æ–≤—ã–µ –∑–∞–¥–∞—á–∏?", 14)

@after_1_month_router.message(F.text, Form_1.question_15)
async def question_10(message: Message, state: FSMContext):
    await handle_question(message, state, Form_1.question_16, "–ù–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –∫—É—Ä–∞—Ç–æ—Ä/–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫?", 15)

@after_1_month_router.message(F.text, Form_1.question_16)
async def question_11(message: Message, state: FSMContext):
    await handle_question(message, state, Form_1.question_17, 
    "–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É —Å –Ω–∏–º? –û–ø–∏—à–∏—Ç–µ –≤ –ø–∞—Ä—É —Å–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã? –í–æ–∑–º–æ–∂–Ω–æ –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã —É–∂–µ —É –≤–∞—Å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω.", 16)

@after_1_month_router.message(F.text, Form_1.question_17)
async def question_12(message: Message, state: FSMContext):
    await handle_question(message, state, Form_1.question_18, "–ë—ã–ª–∞ –ª–∏ –≤—Å—Ç—Ä–µ—á–∞ —Å –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª–µ–º —Å–æ–≤–µ—Ç–∞ –º–æ–ª–æ–¥–µ–∂–∏ —Ñ–∏–ª–∏–∞–ª–∞?", 17)

@after_1_month_router.message(F.text, Form_1.question_18)
async def question_13(message: Message, state: FSMContext):
    await handle_question(message, state, Form_1.question_19, "–£–∂–µ –ø—Ä–∏–Ω—è–ª(–∞) —É—á–∞—Å—Ç–∏–µ –≤ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö —Ñ–∏–ª–∏–∞–ª–∞?", 18)

@after_1_month_router.message(F.text, Form_1.question_19)
async def final_questions(message: Message, state: FSMContext):
    await handle_question(message, state, Form_1.result, "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å—ã?", 19)

@after_1_month_router.message(F.text, Form_1.result)
async def result(message: Message, state: FSMContext):
    await finish_poll(message, state, 19)